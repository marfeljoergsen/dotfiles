# See picom sample at: https://github.com/yshui/picom/blob/248bffede73e520a4929dd7751667d29d4169d59/picom.sample.conf#L175-L181
#
# WARNING: Start with "--xrender-sync-fence" and CPU-consumption will be high,
# maybe 90-95% on a thread!  To remedy this, try enabling the glx backend -
# that should use OpenGL to offload work to the GPU. It should be as simple as
# “—backend glx” in the command line.
#
# WARNING: If you start with "picom --xrender-sync-fence" CPU consumption will be high!

backend = "glx";
#backend = "xrender";
#backend = "xr_glx_hybrid";

glx-no-stencil = true;

#           Use X Sync fence to sync clients' draw calls, to make sure all draw calls are finished before picom starts drawing. Needed
#           on nvidia-drivers with GLX backend for some users.
#[ 07/17/2021 03:36:47.139 x_fence_sync ERROR ] Failed to trigger the fence (X error 136 XSyncBadFence request 134 minor 15 serial 2149)
#[ 07/17/2021 03:36:47.139 paint_all ERROR ] x_fence_sync failed, xrender-sync-fence will be disabled from now on.
xrender-sync-fence = true;
shadow = true;
fading = true;

# ---=== WARNING: To avoid this "x_fence_sync"-error: ===---
# % picom --config picom.conf 
# [ 07/15/2021 00:51:56.645 x_fence_sync ERROR ] Failed to trigger the fence (X error 136 XSyncBadFence request 134 minor 15 serial 2125)
# [ 07/15/2021 00:51:56.645 paint_all ERROR ] x_fence_sync failed, xrender-sync-fence will be disabled from now on.
# 
# Use the "--xrender-sync-fence" option (from the documentation: "Use X Sync
# fence to sync clients' draw calls, to make sure all draw calls are finished
# before picom starts drawing. Needed on nvidia-drivers with GLX backend for some
# users.
# 
# % picom --xrender-sync-fence --config picom.conf
# [ 07/15/2021 00:50:25.136 win_clear_flags WARN ] Flags cleared on a destroyed window 0x0040040c


# ============================================
# To figure out the WM_CLASS, in bash terminal type:
# $ xprop WM_CLASS
#    <click on a window>
# WM_CLASS(STRING) = "termite", "Termite"
# ============================================

# --- Test command (ctrl+C to break) ---
# compton --config ~/.config/compton.conf

#From the compton man page:
#    --opacity-rule OPACITY:'CONDITION'
#
#    Specify a list of opacity rules, in the format PERCENT:PATTERN,
#    like 50:name *="Firefox". compton-trans is recommended over
#    this. Note we do not distinguish 100% and unset, and we don’t make
#    any guarantee about possible conflicts with other programs that
#    set _NET_WM_WINDOW_OPACITY on frame or client windows.
# ------

#inactive-dim = 0.1;

# Opacity of inactive windows. (0.1 - 1.0, defaults to 1.0)
#inactive-opacity = 0.5;

#frame-opacity = 0.7;

#inactive-opacity-override = false;
#inactive-opacity-override = true;

# Default opacity for active windows. (0.0 - 1.0, defaults to 1.0) <-- WARNING: Best to leave at 1.0!
#   If you make this value <1, ensure e.g. gimp has opacity 1!
active-opacity = 1
#active-opacity = 0.98

# Below sets 93% opacity for termite:
# opacity-rule = ["93:class_g = 'Termite'"];

# Below sets opacity for several apps:
#opacity-rule = [
#             "95:class_g = 'Termite'",
#             "95:class_g = 'Alacritty'",
#             "85:class_g = 'Terminator'",
#             "95:class_g = 'Emacs'"];

opacity-rule = [
 "80:class_g = 'Alacritty' && !_NET_WM_STATE@:32a",
 "80:class_g = 'Terminator' && !_NET_WM_STATE@:32a",
 "80:class_g = 'Termite' && !_NET_WM_STATE@:32a",
 "80:class_g = 'kitty' && !_NET_WM_STATE@:32a",
 "0:_NET_WM_STATE@[0]:32a *= '_NET_WM_STATE_HIDDEN'",
 "0:_NET_WM_STATE@[1]:32a *= '_NET_WM_STATE_HIDDEN'",
 "0:_NET_WM_STATE@[2]:32a *= '_NET_WM_STATE_HIDDEN'",
 "0:_NET_WM_STATE@[3]:32a *= '_NET_WM_STATE_HIDDEN'",
 "0:_NET_WM_STATE@[4]:32a *= '_NET_WM_STATE_HIDDEN'" ];

